name: Nightly Tests

on:
  schedule:
    # Run every day at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - smoke
        - regression
      browser:
        description: 'Browser to use'
        required: false
        default: 'chrome'
        type: choice
        options:
        - chrome
        - firefox
        - edge

jobs:
  nightly-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Install browsers
      run: |
        # Install Chrome
        wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        
        # Install Firefox
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable firefox xvfb
        
    - name: Start Xvfb
      run: |
        export DISPLAY=:99
        Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
        sleep 3
        
    - name: Pre-test health check
      run: |
        echo "Checking test environment..."
        google-chrome --version
        firefox --version
        mvn --version
        java -version
        
    - name: Run comprehensive tests
      run: |
        export DISPLAY=:99
        BROWSER="${{ github.event.inputs.browser || 'chrome' }}"
        TEST_SUITE="${{ github.event.inputs.test_suite || 'all' }}"
        
        echo "Running tests with browser: $BROWSER, suite: $TEST_SUITE"
        
        # Run tests with retry mechanism
        for i in {1..3}; do
          echo "Test attempt $i"
          if mvn test -Dbrowser=$BROWSER -Dsuite=$TEST_SUITE -Dmaven.test.failure.ignore=true; then
            echo "Tests completed successfully on attempt $i"
            break
          else
            echo "Tests failed on attempt $i"
            if [ $i -eq 3 ]; then
              echo "All test attempts failed"
              exit 1
            fi
            sleep 30
          fi
        done
      env:
        HEADLESS: true
        
    - name: Generate comprehensive report
      if: always()
      run: |
        echo "Generating comprehensive test report..."
        
        # Create summary
        cat > test-summary.md << 'EOF'
        # Nightly Test Report
        
        **Date**: $(date)
        **Browser**: ${{ github.event.inputs.browser || 'chrome' }}
        **Test Suite**: ${{ github.event.inputs.test_suite || 'all' }}
        
        ## Test Results
        EOF
        
        # Add test results if available
        if [ -f "target/surefire-reports/TEST-*.xml" ]; then
          TOTAL_TESTS=$(grep -h "tests=" target/surefire-reports/TEST-*.xml | sed 's/.*tests="\([0-9]*\)".*/\1/' | awk '{sum+=$1} END {print sum}')
          FAILED_TESTS=$(grep -h "failures=" target/surefire-reports/TEST-*.xml | sed 's/.*failures="\([0-9]*\)".*/\1/' | awk '{sum+=$1} END {print sum}')
          
          echo "- **Total Tests**: $TOTAL_TESTS" >> test-summary.md
          echo "- **Failed Tests**: $FAILED_TESTS" >> test-summary.md
          echo "- **Success Rate**: $(( (TOTAL_TESTS - FAILED_TESTS) * 100 / TOTAL_TESTS ))%" >> test-summary.md
        fi
        
    - name: Archive test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: nightly-test-results-${{ github.run_number }}
        path: |
          src/test/java/utils/reports/
          target/surefire-reports/
          target/screenshots/
          test-summary.md
        retention-days: 30
        
    - name: Upload failure screenshots
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: nightly-failure-screenshots-${{ github.run_number }}
        path: target/screenshots/
        retention-days: 14
        
    - name: Publish test results
      if: always()
      uses: dorny/test-reporter@v1
      with:
        name: Nightly Test Results
        path: target/surefire-reports/*.xml
        reporter: java-junit
        fail-on-error: false
        
  performance-check:
    runs-on: ubuntu-latest
    needs: nightly-tests
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Performance analysis
      run: |
        echo "## Performance Analysis" >> $GITHUB_STEP_SUMMARY
        echo "- **Total Duration**: ${{ needs.nightly-tests.outputs.duration || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Average Test Time**: Calculating..." >> $GITHUB_STEP_SUMMARY
        
        # Add performance trends analysis here
        echo "Performance check completed"
        
  notification:
    runs-on: ubuntu-latest
    needs: [nightly-tests, performance-check]
    if: always()
    
    steps:
    - name: Send notification
      run: |
        STATUS="✅ SUCCESS"
        if [ "${{ needs.nightly-tests.result }}" != "success" ]; then
          STATUS="❌ FAILED"
        fi
        
        echo "Nightly tests completed with status: $STATUS"
        
        # Here you can add Slack, Teams, or email notifications
        # Example for Slack:
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"Nightly tests '$STATUS' - $(date)"}' \
        #   ${{ secrets.SLACK_WEBHOOK_URL }}
        
  cleanup:
    runs-on: ubuntu-latest
    needs: [nightly-tests, performance-check, notification]
    if: always()
    
    steps:
    - name: Cleanup old artifacts
      run: |
        echo "Cleaning up old test artifacts..."
        # This would typically involve API calls to remove old artifacts
        # GitHub automatically removes artifacts after retention period
        echo "Cleanup completed"
